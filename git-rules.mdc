---
description: 
globs: 
alwaysApply: false
---
# Git Commands for PowerShell

## Single Command Workflow
```powershell
# 1. Check status
git status

# 2. Add files (always use quotes)
git add "src/site/notes/path/to/file.md"

# 3. Set git config (do this once)
git config user.name "Ray"
git config user.email "ray@example.com"

# 4. Commit
git commit -m "type: your message here"

# 5. Push
git push
```

## Important Rules
- Run each command separately (no &&, no pipes)
- Always use quotes around file paths
- Keep commands simple, one action per line
- If you get errors, wait a moment and try again
- Never combine multiple git commands
- ALWAYS ASK BEFORE COMMITTING OR PUSHING CHANGES
- NEVER automatically commit changes without explicit user approval

## Common Fixes
- Git index locked? Run: `Remove-Item -Force .git/index.lock`
- Ignore LF/CRLF warnings on Windows
- Buffer size errors? Run commands one at a time
- Always check `git status` between commands

## Important Notes
- Always use double quotes around file paths
- Split complex commands into separate lines (don't use &&)
- Don't use pipe operators (|) with git commands
- If git index is locked, use: `Remove-Item -Force .git/index.lock`
- For viewing git log, use: `git log -n 1` instead of `git log -1`

## Common Issues & Solutions
- If you get buffer size errors, run commands separately
- If commit fails, check if files are actually staged with `git status`
- Line ending warnings (LF/CRLF) on Windows can be ignored
- If git complains about index.lock, remove it and try again

## Example of Full Workflow
```powershell
# Check status
git status

# Add specific file
git add "src/site/notes/Daily Notes/2025-03-22.md"

# Set git environment variables
$env:GIT_AUTHOR_NAME="Ray"
$env:GIT_AUTHOR_EMAIL="ray@example.com"
$env:GIT_COMMITTER_NAME="Ray"
$env:GIT_COMMITTER_EMAIL="ray@example.com"

# Commit changes
git commit -m "docs: update daily note content"

# Push to remote
git push
```

# Git Rules for Digital Garden

## Before Committing Changes
```powershell
# Always remove the index lock file first if it exists
Remove-Item -Force .git/index.lock

# Then proceed with git commands
git add "path/to/file"
git commit -m "type: descriptive message"
git push
```

## Workflow with User Permission
```powershell
# 1. Show the user what files have been modified
git status

# 2. Show the diff to the user for review
git diff "path/to/file"

# 3. ASK EXPLICITLY for permission before staging
# Only proceed after confirmation
git add "path/to/file"

# 4. Show what's staged and ASK AGAIN before committing
git status
# Only commit after explicit permission

# 5. Get final confirmation before pushing
git push
```

## Commit Message Format
```
type: brief description of changes

# Types:
- fix:     Bug fixes or error corrections
- feat:    New features or enhancements
- docs:    Documentation changes
- style:   Code style/formatting changes
- refact:  Code refactoring
- test:    Adding/modifying tests
- chore:   Maintenance tasks
```

## Common Issues and Solutions

### Index Lock File
- The `.git/index.lock` file is created during Git operations
- If a Git command is interrupted, this file may remain
- Always remove it before new Git operations if commands fail
- Use `Remove-Item -Force .git/index.lock`

### Line Endings
- Windows will show CRLF warnings - this is normal
- Don't worry about "LF will be replaced by CRLF" messages
- Git will handle line ending conversions automatically

### Best Practices
1. Always work in feature branches for major changes
2. Keep commits atomic (one logical change per commit)
3. Write clear, descriptive commit messages
4. Pull before pushing to avoid conflicts
5. Remove index.lock if Git operations fail

### Emergency Fixes
```powershell
# If Git seems stuck or locked
Remove-Item -Force .git/index.lock

# If branch is in bad state
git status  # Check current state
git stash   # Save changes temporarily
git pull    # Get latest changes
git stash pop # Restore changes
```

### File Paths
- Use quotes around paths with spaces
- Use forward slashes in paths
- Example: `git add "src/site/notes/Daily Notes/note.md"` 