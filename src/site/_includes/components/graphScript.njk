<script type="module">
    // Instead of importing React and ReactDOM, we'll load them from a CDN
    const fetchGraphData = async () => {
        try {
            console.log('Fetching graph data...');
            const response = await fetch('/graph.json');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const graphData = await response.json();
            console.log('Raw graph data:', graphData);

            // Validate graph data structure
            if (!graphData || !graphData.nodes || !graphData.links) {
                throw new Error('Invalid graph data structure');
            }

            return graphData;
        } catch (error) {
            console.error('Error fetching graph data:', error);
            return null;
        }
    };

    function filterLocalGraphData(graphData, depth) {
        if (graphData == null) {
            console.warn('Graph data is null in filterLocalGraphData');
            return { nodes: [], edges: [] };
        }
        
        // Convert object to array of nodes if needed
        const nodesArray = Array.isArray(graphData.nodes) 
            ? graphData.nodes 
            : Object.values(graphData.nodes);
        
        const linksArray = Array.isArray(graphData.links) 
            ? graphData.links 
            : Object.values(graphData.links);

        console.log('Local graph raw data:', { 
            nodesCount: nodesArray.length, 
            linksCount: linksArray.length 
        });

        // Create a map from node id to index
        const nodeIdToIndex = {};
        nodesArray.forEach((node, index) => {
            nodeIdToIndex[node.id] = index;
        });

        // Convert graph data to our component's format
        const nodes = nodesArray.map((node, index) => ({
            // Use the original node ID to ensure edges connect properly
            id: node.id,
            originalId: node.id,
            url: node.url,
            title: node.title || node.id,
            neighbors: node.neighbors || [],
            index: index // Store original index
        }));

        console.log('Node ID mapping:', nodeIdToIndex);

        // Map links using the node ID to index mapping
        const edges = linksArray.map(link => {
            const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
            const targetId = typeof link.target === 'object' ? link.target.id : link.target;
            
            return {
                source: sourceId,
                target: targetId,
                value: link.value || 1
            };
        });

        console.log('Local graph processed:', { 
            nodes, 
            edges 
        });

        return { nodes, edges };
    }

    function drag(simulation) {
        function dragstarted(event, d) {
            console.log('Drag started:', d);
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }
        
        function dragged(event, d) {
            console.log('Dragging:', d);
            d.fx = event.x;
            d.fy = event.y;
        }
        
        function dragended(event, d) {
            console.log('Drag ended:', d);
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }
        
        return d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended);
    }

    function renderGraph(container, nodes, edges) {
        if (!container) {
            console.error('Graph container not found');
            return;
        }

        if (!nodes || nodes.length === 0) {
            console.warn('No nodes to render');
            container.innerHTML = '<div style="padding: 20px; text-align: center; color: #cdd6f4;">No graph data available</div>';
            return;
        }

        try {
            console.log('Rendering graph with nodes:', nodes.length, 'and edges:', edges.length);
            
            // Clear previous graph
            container.innerHTML = '';
            
            // Create SVG element with proper sizing
            const width = Math.max(container.clientWidth, 1000) || 1000;
            const height = Math.max(container.clientHeight, 800) || 800;
            
            console.log('Graph container dimensions:', width, height);
            
            const svg = d3.create("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("viewBox", [0, 0, width, height])
                .attr("style", "max-width: 100%; height: auto;");
            
            // Create a lookup map for nodes by ID
            const nodeById = new Map();
            nodes.forEach(node => {
                nodeById.set(node.id, node);
            });
            
            console.log('Node map size:', nodeById.size);
            
            // Process edges to reference node objects directly
            const links = [];
            edges.forEach(edge => {
                const source = nodeById.get(edge.source);
                const target = nodeById.get(edge.target);
                
                if (source && target) {
                    links.push({
                        source,
                        target,
                        value: edge.value || 1
                    });
                } else {
                    console.warn('Could not find nodes for edge:', edge);
                }
            });
            
            console.log('Processed links:', links.length);

            // Create a group for graph elements
            const g = svg.append("g");
            
            // Define the zoom behavior
            const zoom = d3.zoom()
                .scaleExtent([0.5, 5]) // Adjust the scale extent as needed
                .on("zoom", (event) => {
                    svg.attr("transform", event.transform);
                });

            // Apply zoom to the SVG
            svg.call(zoom);

            // Set the initial zoom level (e.g., 1.5 for 150% zoom)
            const initialScale = 3.5;
            const initialTranslateX = 0; // Adjust as needed
            const initialTranslateY = 0; // Adjust as needed

            // Apply the initial transformation
            svg.attr("transform", `translate(${initialTranslateX}, ${initialTranslateY}) scale(${initialScale})`);

            // Define colors object for consistent reference
            window.colors = window.colors || {
                background: '#1e1e2e',
                text: '#cdd6f4',
                subtext: '#bac2de',
                surface: '#313244',
                overlay: '#45475a',
                base: '#24273a',
                mantle: '#181825',
                crust: '#11111b',
                rosewater: '#f5e0dc',
                flamingo: '#f2cdcd',
                pink: '#f5c2e7',
                mauve: '#cba6f7',
                red: '#f38ba8',
                maroon: '#eba0ac',
                peach: '#fab387',
                yellow: '#f9e2af',
                green: '#a6e3a1',
                teal: '#94e2d5',
                sky: '#89dceb',
                sapphire: '#74c7ec',
                blue: '#89b4fa',
                lavender: '#b4befe'
            };

            const colors = window.colors;

            // Group color mapping based on node group
            const groupColors = {
                'none': colors.blue,
                'Daily Notes': colors.green,
                'Programming': colors.mauve,
                'Projects': colors.peach,
                'Personal': colors.pink,
                'Reference': colors.yellow
            };

            // Set up force simulation with optimized parameters
            const simulation = d3.forceSimulation(nodes)
                .force("link", d3.forceLink(edges).id(d => d.id).distance(100))
                .force("charge", d3.forceManyBody().strength(-50))
                .force("center", d3.forceCenter(width / 2, height / 2))
                .alphaDecay(0.05)
                .alpha(0)  // Start with alpha at 0 to prevent automatic movement
                .stop();   // Stop the simulation initially

            // Initialize all nodes EXACTLY at the center
            nodes.forEach(node => {
                node.x = width / 2;
                node.y = height / 2;
            });

            // Create node and link elements immediately at center positions
            // Create edges
            const link = g.append("g")
                .attr("stroke", colors.overlay)
                .attr("stroke-opacity", 0.5)
                .selectAll("line")
                .data(links)
                .join("line")
                .attr("stroke-width", d => Math.sqrt(d.value || 1) * 0.8)
                .attr("x1", d => width / 2)
                .attr("y1", d => height / 2)
                .attr("x2", d => width / 2)
                .attr("y2", d => height / 2);

            // Create nodes with custom styling - initially at center
            const node = g.append("g")
                .selectAll("circle")
                .data(nodes)
                .join("circle")
                .attr("r", d => {
                    const numberOfNeighbors = (d.neighbors && d.neighbors.length) || 2;
                    return Math.min(10, Math.max(numberOfNeighbors / 2, 5));
                })
                .attr("fill", d => groupColors[d.group] || colors.blue)
                .attr("stroke", colors.text)
                .attr("stroke-width", 1)
                .attr("data-node-id", d => d.id)
                .attr("class", "graph-node")
                .attr("cx", width / 2)  // Force initial position at center
                .attr("cy", height / 2)  // Force initial position at center
                .call(drag(simulation))
                .on("mouseover", function(event, d) {
                    // Highlight the node
                    d3.select(this)
                      .attr("fill", colors.lavender)
                      .attr("r", function(d) {
                        const currentRadius = +d3.select(this).attr("r");
                        return currentRadius * 1.2;
                      });
                    
                    // Highlight connected links and make them thicker
                    link.style("stroke", l => 
                        l.source.id === d.id || l.target.id === d.id ? colors.lavender : colors.overlay)
                        .style("stroke-opacity", l => 
                        l.source.id === d.id || l.target.id === d.id ? 0.8 : 0.5)
                        .style("stroke-width", l => 
                        l.source.id === d.id || l.target.id === d.id ? 2 : Math.sqrt(l.value || 1) * 0.8);
                    
                    // Highlight connected node labels
                    label.style("font-weight", l => 
                        l.id === d.id || links.some(link => 
                            (link.source.id === d.id && link.target.id === l.id) || 
                            (link.target.id === d.id && link.source.id === l.id)
                        ) ? "bold" : "normal")
                      .style("font-size", l => 
                        l.id === d.id ? "14px" : "12px")
                      .style("fill", l => 
                        l.id === d.id ? colors.lavender : colors.text);
                    
                    // Bring connected nodes to front
                    node.each(function(n) {
                        if (n.id === d.id) {
                            this.parentNode.appendChild(this);
                        }
                    });

                    // Make tooltip with node info
                    const tooltip = document.createElement('div');
                    tooltip.id = 'graph-tooltip';
                    tooltip.style.position = 'absolute';
                    tooltip.style.left = (event.pageX + 10) + 'px';
                    tooltip.style.top = (event.pageY + 10) + 'px';
                    tooltip.style.backgroundColor = colors.surface;
                    tooltip.style.color = colors.text;
                    tooltip.style.padding = '8px 12px';
                    tooltip.style.borderRadius = '8px';
                    tooltip.style.fontSize = '14px';
                    tooltip.style.zIndex = '1000';
                    tooltip.style.boxShadow = '0 4px 6px rgba(0,0,0,0.3)';
                    tooltip.style.border = `1px solid ${colors.overlay}`;
                    tooltip.innerHTML = `<strong>${d.title}</strong><br/><span style="color:${colors.subtext}">Connections: ${d.neighbors?.length || 0}</span>`;
                    document.body.appendChild(tooltip);
                })
                .on("mouseout", function(d) {
                    // Reset node style
                    d3.select(this)
                      .attr("fill", d => groupColors[d.group] || colors.blue)
                      .attr("r", function(d) {
                        const numberOfNeighbors = (d.neighbors && d.neighbors.length) || 2;
                        return Math.min(10, Math.max(numberOfNeighbors / 2, 5));
                      });
                    
                    // Reset links
                    link.style("stroke", colors.overlay)
                        .style("stroke-opacity", 0.5)
                        .style("stroke-width", d => Math.sqrt(d.value || 1) * 0.8);
                    
                    // Reset labels
                    label.style("font-weight", "normal")
                         .style("font-size", "12px")
                         .style("fill", colors.text);
                    
                    // Remove tooltip
                    const tooltip = document.getElementById('graph-tooltip');
                    if (tooltip) {
                        document.body.removeChild(tooltip);
                    }
                })
                .on("click", function(event, d) {
                    // Stop the default link navigation behavior
                    event.preventDefault();
                    
                    console.log('Node clicked:', d);
                    
                    // Remove previous focus
                    d3.selectAll(".graph-node").classed("focused-node", false);
                    
                    // Add focus to clicked node
                    d3.select(this)
                      .classed("focused-node", true)
                      .attr("data-node-id", d.id); // Ensure node ID is stored in the element
                    
                    // Get the current depth from the slider
                    const depthControl = document.getElementById('graph-depth');
                    if (depthControl) {
                        const depth = parseInt(depthControl.value);
                        
                        // Use our new handler function
                        handleNodeClick(d.id, depth);
                    }
                    
                    // Navigate to the note when clicked (but after handling the graph update)
                    if (d.url) {
                        // Slight delay to allow graph updating to happen first
                        setTimeout(() => {
                            window.location.href = d.url;
                        }, 100);
                    }
                });

            // Create node labels - initially at center
            const label = g.append("g")
                .selectAll("text")
                .data(nodes)
                .join("text")
                .text(d => d.title || d.id)
                .attr('x', width / 2 + 12)  // Force initial position at center
                .attr('y', height / 2 + 3)  // Force initial position at center
                .style('font-size', '12px')
                .style('pointer-events', 'none')
                .style('fill', colors.text)
                .style('font-family', 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif')
                .style('opacity', 0);  // Start labels as invisible

            // Group nodes by depth for staggered initialization
            const depthGroups = {};
            nodes.forEach(node => {
                const depth = node.depth || 1;
                if (!depthGroups[depth]) {
                    depthGroups[depth] = [];
                }
                depthGroups[depth].push(node);
            });

            // Staggered initialization from the center based on depth
            let depthDelay = 0;
            Object.keys(depthGroups).sort((a, b) => parseInt(a) - parseInt(b)).forEach(depth => {
                const nodesInDepth = depthGroups[depth];
                setTimeout(() => {
                    console.log(`Initializing depth ${depth} nodes (${nodesInDepth.length} nodes)...`);
                    
                    // Rapid initialization of all nodes in this depth group
                    let nodeDelay = 0;
                    nodesInDepth.forEach(node => {
                        setTimeout(() => {
                            // Add larger, more dynamic offset from center
                            node.x = width / 2 + (Math.random() - 0.5) * 200;
                            node.y = height / 2 + (Math.random() - 0.5) * 200;
                            
                            // Apply a small force to make it "pop" into place
                            simulation.alpha(0.8).restart();
                            
                            // Update node and edge positions immediately
                            link
                                .attr("x1", d => d.source.x)
                                .attr("y1", d => d.source.y)  
                                .attr("x2", d => d.target.x)
                                .attr("y2", d => d.target.y);
            
                            node
                                .attr("cx", d => d.x)
                                .attr("cy", d => d.y);
                            
                            label
                                .attr("x", d => d.x + 12)
                                .attr("y", d => d.y + 3)
                                .style('opacity', 1);  // Make labels visible as nodes appear
                        }, nodeDelay);
                        
                        // Very short delay between nodes in the same depth (rapid fire)
                        nodeDelay += 20; // Just 20ms between nodes in same depth
                    });
                    
                }, depthDelay);
                
                // Add a longer delay between depth groups
                depthDelay += 800; // 800ms pause between depth levels
            });

            // Update node and edge positions on each tick  
            simulation.on("tick", () => {
                // Keep nodes within bounds
                nodes.forEach(d => {
                    d.x = Math.max(10, Math.min(width - 10, d.x));
                    d.y = Math.max(10, Math.min(height - 10, d.y));
                });
                
                // Update node positions
                node.attr("cx", d => d.x)
                    .attr("cy", d => d.y);

                // Increase delay for edge position updates
                setTimeout(() => {
                    link.attr("x1", d => d.source.x)
                        .attr("y1", d => d.source.y)
                        .attr("x2", d => d.target.x)
                        .attr("y2", d => d.target.y);
                }, 150); // Increased delay to 150ms
            });
            
            // Log when the simulation stabilizes
            simulation.on("end", () => {
                console.log("Force simulation has converged");
            });

            // Add the SVG to the container
            container.appendChild(svg.node());

            // Update graph container styles
            container.style.backgroundColor = colors.background;
            
            // Store graph data in the container for depth filtering
            container.dataset.graphData = JSON.stringify({
                originalNodes: nodes,
                originalLinks: links
            });
            
            // Return the components for external access
            return {
                svg, g, node, link, label, simulation
            };

        } catch (error) {
            console.error('Error rendering graph:', error);
            container.innerHTML = `<div style="padding: 20px; color: ${colors?.red || '#f38ba8'}; background-color: ${colors?.crust || '#11111b'}; border-radius: 8px; margin: 10px;">Error rendering graph: ${error.message}</div>`;
        }
    }

    // Filter nodes and links by depth using breadth-first search
    function filterNodesByDepth(allNodes, allLinks, centralNodeId, maxDepth) {
        console.log(`Filtering by depth: ${maxDepth} from node ${centralNodeId}`);
        
        // Create node map for faster lookup
        const nodeMap = new Map();
        allNodes.forEach(node => nodeMap.set(node.id, node));
        
        // Track distances from central node
        const distances = new Map();
        distances.set(centralNodeId, 0);
        
        // Queue for BFS
        const queue = [{ id: centralNodeId, distance: 0 }];
        
        // Process the queue
        while (queue.length > 0) {
            const { id, distance } = queue.shift();
            
            // If we've reached max depth, don't explore further
            if (distance >= maxDepth) continue;
            
            // Find all links connected to this node
            allLinks.forEach(link => {
                let neighborId = null;
                let sourceId = link.source;
                let targetId = link.target;
                
                // Handle both object and primitive representations
                if (typeof sourceId === 'object' && sourceId) {
                    sourceId = sourceId.id;
                }
                
                if (typeof targetId === 'object' && targetId) {
                    targetId = targetId.id;
                }
                
                // Check if this node is the source
                if (sourceId === id) {
                    neighborId = targetId;
                }
                // Check if this node is the target
                else if (targetId === id) {
                    neighborId = sourceId;
                }
                
                // If we found a neighbor and haven't visited it yet
                if (neighborId && !distances.has(neighborId)) {
                    distances.set(neighborId, distance + 1);
                    queue.push({ id: neighborId, distance: distance + 1 });
                }
            });
        }
        
        // Filter nodes and links based on BFS results
        const filteredNodes = allNodes.filter(node => distances.has(node.id) && distances.get(node.id) <= maxDepth);
        
        const filteredLinks = allLinks.filter(link => {
            let sourceId = link.source;
            let targetId = link.target;
            
            // Handle both object and primitive representations
            if (typeof sourceId === 'object' && sourceId) {
                sourceId = sourceId.id;
            }
            
            if (typeof targetId === 'object' && targetId) {
                targetId = targetId.id;
            }
            
            return distances.has(sourceId) && 
                   distances.has(targetId) && 
                   distances.get(sourceId) <= maxDepth && 
                   distances.get(targetId) <= maxDepth;
        });
        
        return { filteredNodes, filteredLinks };
    }
    
    // Render a filtered graph based on depth
    function renderFilteredGraph(depth) {
        if (!window.originalGraphData) {
            console.error('Original graph data not available');
            return;
        }

        if (!window.centralNodeId) {
            console.error('Central node ID not available');
            const currentPath = window.location.pathname;
            console.log(`Looking for node with URL ${currentPath}`);
            
            // Try to find the node for the current page
            const nodesArray = Array.isArray(window.originalGraphData.nodes) 
                ? window.originalGraphData.nodes 
                : Object.values(window.originalGraphData.nodes);
            
            const centralNode = nodesArray.find(n => n.url === currentPath);
            if (!centralNode) {
                console.error(`Could not find node for current page: ${currentPath}`);
            return;
        }
        
            window.centralNodeId = centralNode.id;
            console.log(`Found central node ID: ${window.centralNodeId}`);
        }
        
        console.log(`Rendering filtered graph with depth ${depth} from node ${window.centralNodeId}`);
        
        // Get the container
        const container = document.getElementById('link-graph');
        if (!container) {
            console.error('Graph container not found');
                    return;
                }
                
        // Convert data format
        const nodesArray = Array.isArray(window.originalGraphData.nodes) 
            ? window.originalGraphData.nodes 
            : Object.values(window.originalGraphData.nodes);
        
        const linksArray = Array.isArray(window.originalGraphData.links) 
            ? window.originalGraphData.links 
            : Object.values(window.originalGraphData.links);

        // Log the unfiltered data for debugging
        console.log(`Unfiltered data: ${nodesArray.length} nodes, ${linksArray.length} links`);
        
        // Filter nodes by depth using breadth-first search
        const { filteredNodes, filteredLinks } = filterNodesByDepth(nodesArray, linksArray, window.centralNodeId, depth);
        
        console.log(`Filtered to ${filteredNodes.length} nodes and ${filteredLinks.length} links at depth ${depth}`);
        
        // Process the filtered data for rendering
        const processedNodes = filteredNodes.map(node => ({
            id: node.id,
            originalId: node.id,
            url: node.url,
            title: node.title || node.id,
            neighbors: node.neighbors || [],
            group: node.group || 'none'
        }));
        
        const processedEdges = filteredLinks.map(link => {
            const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
            const targetId = typeof link.target === 'object' ? link.target.id : link.target;
            
            return {
                source: sourceId,
                target: targetId,
                value: link.value || 1
            };
        });
        
        // Render the filtered graph
        renderGraph(container, processedNodes, processedEdges);
    }

    async function initializeGraph() {
        try {
            console.log('Initializing graph...');
            const graphData = await fetchGraphData();
            
            if (!graphData) {
                console.error('Graph data is null or invalid');
                return;
            }
            
            console.log('Graph data loaded:', graphData);
            
            // Store original graph data globally for filtering
            window.originalGraphData = graphData;
            
            // Convert graph data nodes to array if it's an object
            const nodesArray = Array.isArray(graphData.nodes) 
                ? graphData.nodes 
                : Object.values(graphData.nodes);
            
            // Convert graph data links to array if it's an object
            const linksArray = Array.isArray(graphData.links) 
                ? graphData.links 
                : Object.values(graphData.links);
            
            // Get current page URL to use as central node
            const currentPath = window.location.pathname;
            console.log(`Current page path: ${currentPath}`);
            
            // Find the node that matches the current path
            const centralNode = nodesArray.find(n => n.url === currentPath);
            
            if (!centralNode) {
                            console.warn('Could not find node for current page:', currentPath);
                // Fall back to just rendering the full graph
                const container = document.getElementById('link-graph');
                if (container) {
                    const localData = filterLocalGraphData(graphData, 3);
                    renderGraph(container, localData.nodes, localData.edges);
                }
                return;
            }

            console.log('Central node found:', centralNode);
            
            // Store the central node ID as a global variable for easier access
            window.centralNodeId = centralNode.id;
            
            // Center the graph on the current page node
            const container = document.getElementById('link-graph');
            const width = Math.max(container.clientWidth, 1000) || 1000;
            const height = Math.max(container.clientHeight, 800) || 800;

            // Set initial positions of all nodes based on the central node
            nodesArray.forEach(node => {
                node.x = centralNode.x || width / 2; // Center on current page node
                node.y = centralNode.y || height / 2; // Center on current page node
            });

            // Render local graph with initial depth of 3
            renderFilteredGraph(3);
            
            // Set up depth control event listener
            setupDepthSlider();
            
            // Render full graph if needed
            const fullGraphContainer = document.getElementById('full-graph-container');
            if (fullGraphContainer) {
                const fullData = filterLocalGraphData(graphData, 100); // Use a large depth for full graph
                renderGraph(fullGraphContainer, fullData.nodes, fullData.edges);
            }
        } catch (error) {
            console.error('Error initializing graph:', error);
            // Show error message in the graph container
            const container = document.getElementById('link-graph');
            if (container) {
                container.innerHTML = `<div style="padding: 20px; text-align: center; color: #f38ba8; background-color: #11111b; border-radius: 8px; margin: 10px;">Error initializing graph: ${error.message}</div>`;
            }
        }
    }

    // Initialize graph when D3 is loaded
    document.addEventListener('DOMContentLoaded', function() {
        if (typeof d3 === 'undefined') {
            console.error('D3 library not loaded');
            const container = document.getElementById('link-graph');
            if (container) {
                container.innerHTML = '<div style="padding: 20px; text-align: center; color: #f38ba8; background-color: #11111b; border-radius: 8px; margin: 10px;">Error: D3 library not loaded. Please check your internet connection.</div>';
            }
            return;
        }
        
        console.log('D3 found, initializing graph...');
        initializeGraph();
    });
    
    // Function to setup the depth slider
    function setupDepthSlider() {
        const depthControl = document.getElementById('graph-depth');
        if (!depthControl) {
            console.error('Depth slider not found');
            return;
        }
        
        console.log('Setting up depth slider...');
        
        // Set initial value
        depthControl.value = 3;
        
        // Add event listener
        depthControl.addEventListener('input', function() {
            const depth = parseInt(this.value);
            console.log(`Depth slider changed to: ${depth}`);
            renderFilteredGraph(depth);
            
            // Update visual indicator if present
            const depthIndicator = document.getElementById('depth-value-indicator');
            if (depthIndicator) {
                depthIndicator.textContent = depth.toString();
            }
        });
        
        // Add visual depth indicator if not already present
        if (!document.getElementById('depth-value-indicator')) {
            const depthIndicator = document.createElement('span');
            depthIndicator.id = 'depth-value-indicator';
            depthIndicator.textContent = '3';
            depthIndicator.style.marginLeft = '8px';
            depthIndicator.style.color = '#bac2de';
            depthIndicator.style.fontWeight = 'bold';
            
            const depthLabel = document.querySelector('.depth-control label');
            if (depthLabel) {
                depthLabel.appendChild(depthIndicator);
            }
        }
    }
    
    // Handler for node clicks
    function handleNodeClick(nodeId, depth) {
        console.log(`Node clicked: ${nodeId}, using depth: ${depth}`);
        
        // Store the new central node ID
        window.centralNodeId = nodeId;
        
        // Update the graph with the new central node
        renderFilteredGraph(depth);
    }
    
    // Add CSS for focused node if not already present
    if (!document.getElementById('graph-node-styles')) {
        const style = document.createElement('style');
        style.id = 'graph-node-styles';
        style.textContent = `
            .graph-node {
                transition: all 0.3s ease;
                cursor: pointer;
            }
            .focused-node {
                stroke: #b4befe;
                stroke-width: 3px;
                r: 12px;
            }
            #graph-tooltip {
                pointer-events: none;
            }
        `;
        document.head.appendChild(style);
    }
</script>

<!-- Load D3.js from CDN -->
<script src="https://d3js.org/d3.v7.min.js"></script>

<div x-data="{ graphData: null, depth: 3, showFullGraph: false }" id="graph-component">
    <div class="graph-title-container">
        <div class="graph-title">Connected Pages</div>
        <div id="graph-controls">
            <div class="depth-control">
                <label for="graph-depth">Depth</label>
                <div class="slider">
                    <input x-model.number="depth" name="graph-depth" list="depthmarkers" type="range" step="1" min="1" max="3" id="graph-depth"/>
                    <datalist id="depthmarkers">
                        <option value="1" label="1"></option>
                        <option value="2" label="2"></option>
                        <option value="3" label="3"></option>
                    </datalist>
                </div>
            </div>
        </div>
    </div>
    <div id="link-graph" class="graph" style="min-height: 600px; min-width: 100%; height: 600px; border-radius: 12px; overflow: hidden; border: 1px solid #313244;"></div>
    <div id="full-graph-container" class="graph" x-show="showFullGraph" style="min-height: 800px; min-width: 100%; height: 800px; border-radius: 12px; overflow: hidden; border: 1px solid #313244;"></div>
</div>

<!-- Depth control styling -->
<style>
    #graph-component {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    }
    .graph-title-container {
        background-color: #1e1e2e;
        color: #cdd6f4;
        border-radius: 12px 12px 0 0;
        padding: 12px 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: 1px solid #313244;
        border-bottom: none;
    }
    .graph-title {
        font-weight: 600;
        font-size: 18px;
    }
    #graph-controls {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    .depth-control {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    .depth-control label {
        font-size: 14px;
        color: #bac2de;
    }
    .slider {
        position: relative;
        width: 150px;
    }
    input[type="range"] {
        width: 100%;
        height: 5px;
        -webkit-appearance: none;
        appearance: none;
        background: #313244;
        outline: none;
        border-radius: 5px;
    }
    input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: #89b4fa;
        cursor: pointer;
        border: 2px solid #cdd6f4;
        transition: background 0.2s;
    }
    input[type="range"]::-webkit-slider-thumb:hover {
        background: #b4befe;
    }
    input[type="range"]::-moz-range-thumb {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: #89b4fa;
        cursor: pointer;
        border: 2px solid #cdd6f4;
        transition: background 0.2s;
    }
    input[type="range"]::-moz-range-thumb:hover {
        background: #b4befe;
    }
    datalist {
        display: flex;
        justify-content: space-between;
        color: #bac2de;
        font-size: 12px;
        margin-top: 4px;
    }
</style>