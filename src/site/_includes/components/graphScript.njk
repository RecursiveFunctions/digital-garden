<script type="module">
    import React from 'react';
    import { createRoot } from 'react-dom/client';
    import Graph from '/site/components/Graph.js';

    async function fetchGraphData() {
        const graphData = await fetch('/graph.json').then(res => res.json());
        const fullGraphData = filterFullGraphData(graphData);
        return {graphData, fullGraphData}
    }

    function getNextLevelNeighbours(existing, remaining) {
        const keys = Object.values(existing).map((n) => n.neighbors).flat();
        const n_remaining = Object.keys(remaining).reduce((acc, key) => {
                if (keys.indexOf(key) != -1) {
                    if (!remaining[key].hide) {
                        existing[key] = remaining[key];
                    }
                } else {
                    acc[key] = remaining[key];
                }
                return acc;
            }, {});
        return existing, n_remaining;
    }

    function filterLocalGraphData(graphData, depth) {
        if (graphData == null) {
            return { nodes: [], edges: [] };
        }
        let remaining = JSON.parse(JSON.stringify(graphData.nodes));
        let links = JSON.parse(JSON.stringify(graphData.links));
        let currentLink = decodeURI(window.location.pathname);
        let currentNode = remaining[currentLink] || Object.values(remaining).find((v) => v.home);
        
        // Convert graph data to our component's format
        const nodes = Object.values(remaining).map(node => ({
            id: node.url,
            title: node.title
        }));

        const edges = links.map(link => ({
            source: link.source,
            target: link.target
        }));

        return { nodes, edges };
    }

    function getCssVar(variable) {return getComputedStyle(document.body).getPropertyValue(variable)}

    function htmlDecode(input) {
        var doc = new DOMParser().parseFromString(input, "text/html");
        return doc.documentElement.textContent;
    }

    function filterFullGraphData(graphData) {
        if (graphData == null) {
            return { nodes: [], edges: [] };
        }
        graphData = JSON.parse(JSON.stringify(graphData));
        const hiddens = Object.values(graphData.nodes).filter((n) => n.hide).map((n) => n.id);
        
        const nodes = Object.values(graphData.nodes)
            .filter((n) => !n.hide)
            .map(node => ({
                id: node.url,
                title: node.title
            }));

        const edges = JSON.parse(JSON.stringify(graphData.links))
            .filter((l) => hiddens.indexOf(l.source) == -1 && hiddens.indexOf(l.target) == -1)
            .map(link => ({
                source: link.source,
                target: link.target
            }));

        return { nodes, edges };
    }

    async function initializeGraph() {
        const { graphData, fullGraphData } = await fetchGraphData();
        
        // Render local graph
        const localGraphContainer = document.getElementById('link-graph');
        const localData = filterLocalGraphData(graphData, 3);
        const localRoot = createRoot(localGraphContainer);
        localRoot.render(React.createElement(Graph, { 
            nodes: localData.nodes, 
            edges: localData.edges 
        }));

        // Render full graph
        const fullGraphContainer = document.getElementById('full-graph-container');
        const fullData = filterFullGraphData(graphData);
        const fullRoot = createRoot(fullGraphContainer);
        fullRoot.render(React.createElement(Graph, { 
            nodes: fullData.nodes, 
            edges: fullData.edges 
        }));
    }

    // Initialize graph when the page loads
    initializeGraph();
</script>
<div x-data="{ graphData: null, depth: 3, showFullGraph: false }" id="graph-component">
    <div class="graph-title-container">
        <div class="graph-title">Connected Pages</div>
        <div id="graph-controls">
            <div class="depth-control">
                <label for="graph-depth">Depth</label>
                <div class="slider">
                    <input x-model.number="depth" name="graph-depth" list="depthmarkers" type="range" step="1" min="1" max="3" id="graph-depth"/>
                    <datalist id="depthmarkers">
                        <option value="1" label="1"></option>
                        <option value="2" label="2"></option>
                        <option value="3" label="3"></option>
                    </datalist>
                </div>
            </div>
        </div>
    </div>
    <div id="link-graph" class="graph"></div>
    <div id="full-graph-container" class="graph" x-show="showFullGraph"></div>
</div>