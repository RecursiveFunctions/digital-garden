<script type="module">
    import React from './node_modules/react';
    import { createRoot } from 'react-dom/client';
    import Graph from '/site/components/Graph.js';

    async function fetchGraphData() {
        try {
            console.log('Fetching graph data...');
            const response = await fetch('/graph.json');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const graphData = await response.json();
            console.log('Raw graph data:', graphData);

            // Validate graph data structure
            if (!graphData || !graphData.nodes || !graphData.links) {
                throw new Error('Invalid graph data structure');
            }

            const fullGraphData = filterFullGraphData(graphData);
            console.log('Filtered full graph data:', fullGraphData);
            return {graphData, fullGraphData}
        } catch (error) {
            console.error('Error fetching graph data:', error);
            return { graphData: null, fullGraphData: null };
        }
    }

    function getNextLevelNeighbours(existing, remaining) {
        const keys = Object.values(existing).map((n) => n.neighbors).flat();
        const n_remaining = Object.keys(remaining).reduce((acc, key) => {
                if (keys.indexOf(key) != -1) {
                    if (!remaining[key].hide) {
                        existing[key] = remaining[key];
                    }
                } else {
                    acc[key] = remaining[key];
                }
                return acc;
            }, {});
        return existing, n_remaining;
    }

    function filterLocalGraphData(graphData, depth) {
        if (graphData == null) {
            console.warn('Graph data is null in filterLocalGraphData');
            return { nodes: [], edges: [] };
        }
        
        // Convert object to array of nodes if needed
        const nodesArray = Array.isArray(graphData.nodes) 
            ? graphData.nodes 
            : Object.values(graphData.nodes);
        
        const linksArray = Array.isArray(graphData.links) 
            ? graphData.links 
            : Object.values(graphData.links);

        console.log('Local graph raw data:', { 
            nodesCount: nodesArray.length, 
            linksCount: linksArray.length 
        });

        // Convert graph data to our component's format
        const nodes = nodesArray.map(node => ({
            id: node.url || node.id,
            title: node.title || node.id
        }));

        const edges = linksArray.map(link => ({
            source: link.source,
            target: link.target
        }));

        console.log('Local graph processed:', { 
            nodes, 
            edges 
        });

        return { nodes, edges };
    }

    function getCssVar(variable) {return getComputedStyle(document.body).getPropertyValue(variable)}

    function htmlDecode(input) {
        var doc = new DOMParser().parseFromString(input, "text/html");
        return doc.documentElement.textContent;
    }

    function filterFullGraphData(graphData) {
        if (graphData == null) {
            console.warn('Graph data is null in filterFullGraphData');
            return { nodes: [], edges: [] };
        }
        
        // Convert object to array of nodes if needed
        const nodesArray = Array.isArray(graphData.nodes) 
            ? graphData.nodes 
            : Object.values(graphData.nodes);
        
        const linksArray = Array.isArray(graphData.links) 
            ? graphData.links 
            : Object.values(graphData.links);

        const hiddens = nodesArray
            .filter((n) => n.hide)
            .map((n) => n.url || n.id);
        
        const nodes = nodesArray
            .filter((n) => !n.hide)
            .map(node => ({
                id: node.url || node.id,
                title: node.title || node.id
            }));

        const edges = linksArray
            .filter((l) => 
                !hiddens.includes(l.source) && 
                !hiddens.includes(l.target)
            )
            .map(link => ({
                source: link.source,
                target: link.target
            }));

        console.log('Full graph processed:', { 
            nodes, 
            edges 
        });

        return { nodes, edges };
    }

    async function initializeGraph() {
        try {
            const { graphData, fullGraphData } = await fetchGraphData();
            
            if (!graphData || !fullGraphData) {
                console.error('Graph data is null or invalid');
                return;
            }
            
            // Render local graph
            const localGraphContainer = document.getElementById('link-graph');
            if (!localGraphContainer) {
                console.error('Local graph container not found');
                return;
            }
            const localData = filterLocalGraphData(graphData, 3);
            const localRoot = createRoot(localGraphContainer);
            localRoot.render(React.createElement(Graph, { 
                nodes: localData.nodes, 
                edges: localData.edges 
            }));

            // Render full graph
            const fullGraphContainer = document.getElementById('full-graph-container');
            if (!fullGraphContainer) {
                console.error('Full graph container not found');
                return;
            }
            const fullData = filterFullGraphData(graphData);
            const fullRoot = createRoot(fullGraphContainer);
            fullRoot.render(React.createElement(Graph, { 
                nodes: fullData.nodes, 
                edges: fullData.edges 
            }));
        } catch (error) {
            console.error('Error initializing graph:', error);
        }
    }

    // Initialize graph when the page loads
    initializeGraph();
</script>
<div x-data="{ graphData: null, depth: 3, showFullGraph: false }" id="graph-component">
    <div class="graph-title-container">
        <div class="graph-title">Connected Pages</div>
        <div id="graph-controls">
            <div class="depth-control">
                <label for="graph-depth">Depth</label>
                <div class="slider">
                    <input x-model.number="depth" name="graph-depth" list="depthmarkers" type="range" step="1" min="1" max="3" id="graph-depth"/>
                    <datalist id="depthmarkers">
                        <option value="1" label="1"></option>
                        <option value="2" label="2"></option>
                        <option value="3" label="3"></option>
                    </datalist>
                </div>
            </div>
        </div>
    </div>
    <div id="link-graph" class="graph"></div>
    <div id="full-graph-container" class="graph" x-show="showFullGraph"></div>
</div>